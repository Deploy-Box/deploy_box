# Generated by Django 5.1.6 on 2025-10-12 09:53

import core.fields
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('organizations', '0004_alter_pendinginvites_unique_together'),
        ('payments', '0005_billing_history_stripe_invoice_hosted_url'),
        ('stacks', '0007_stack_environment_name_stack_environment_type_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('email_billing', models.EmailField(max_length=254)),
                ('currency', models.CharField(choices=[('USD', 'USD'), ('EUR', 'EUR'), ('GBP', 'GBP')], default='USD', max_length=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='account', to='organizations.organization')),
            ],
        ),
        migrations.CreateModel(
            name='AccountDiscount',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('redeemed_at', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='account_discounts', to='payments.account')),
            ],
        ),
        migrations.CreateModel(
            name='BillingHistory',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('amount_cents', models.PositiveBigIntegerField(default=0)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('billed_usage', models.DecimalField(decimal_places=6, default=Decimal('0'), max_digits=20)),
                ('payment_method', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('overdue', 'Overdue'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('stripe_invoice_id', models.CharField(blank=True, max_length=255, null=True)),
                ('stripe_invoice_hosted_url', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('paid_on', models.DateTimeField(blank=True, null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='billing_history', to='organizations.organization')),
            ],
            options={
                'verbose_name_plural': 'Billing History',
            },
        ),
        migrations.CreateModel(
            name='Charge',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('source', models.CharField(choices=[('USAGE', 'Usage'), ('RECURRING', 'Recurring'), ('ADJUSTMENT', 'Adjustment')], max_length=12)),
                ('usage_date', models.DateField(blank=True, null=True)),
                ('description', models.CharField(max_length=255)),
                ('quantity', models.DecimalField(decimal_places=6, default=Decimal('1'), max_digits=20)),
                ('unit_name', models.CharField(max_length=40)),
                ('unit_price_cents', models.BigIntegerField()),
                ('amount_cents', models.BigIntegerField()),
                ('currency', models.CharField(choices=[('USD', 'USD'), ('EUR', 'EUR'), ('GBP', 'GBP')], default='USD', max_length=3)),
                ('invoiced', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charges', to='payments.account')),
            ],
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('code', models.SlugField(blank=True, max_length=60, null=True, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('kind', models.CharField(choices=[('PERCENT', 'Percent'), ('FIXED', 'Fixed amount')], max_length=10)),
                ('percent', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('fixed_cents', models.PositiveBigIntegerField(blank=True, null=True)),
                ('scope', models.CharField(choices=[('ALL', 'Entire invoice'), ('PRODUCT', 'Specific product'), ('METER', 'Specific meter')], default='ALL', max_length=10)),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('recurring', models.BooleanField(default=True)),
                ('stackable', models.BooleanField(default=False)),
                ('max_redemptions', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DiscountApplication',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('amount_cents', models.PositiveBigIntegerField()),
                ('discount', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='payments.discount')),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('issue_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('due_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('OPEN', 'Open'), ('PAID', 'Paid'), ('VOID', 'Void')], default='DRAFT', max_length=8)),
                ('currency', models.CharField(choices=[('USD', 'USD'), ('EUR', 'EUR'), ('GBP', 'GBP')], default='USD', max_length=3)),
                ('subtotal_cents', models.BigIntegerField(default=0)),
                ('discount_cents', models.BigIntegerField(default=0)),
                ('tax_cents', models.BigIntegerField(default=0)),
                ('total_cents', models.BigIntegerField(default=0)),
                ('notes', models.TextField(blank=True, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='payments.account')),
            ],
        ),
        migrations.CreateModel(
            name='InvoiceLine',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('description', models.CharField(max_length=255)),
                ('quantity', models.DecimalField(decimal_places=6, default=Decimal('1'), max_digits=20)),
                ('unit_name', models.CharField(max_length=40)),
                ('unit_price_cents', models.BigIntegerField()),
                ('amount_cents', models.BigIntegerField()),
                ('charge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoice_lines', to='payments.charge')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='payments.invoice')),
            ],
        ),
        migrations.CreateModel(
            name='Meter',
            fields=[
                ('code', models.SlugField(max_length=60, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('unit_name', models.CharField(max_length=40)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('amount_cents', models.PositiveBigIntegerField()),
                ('method', models.CharField(max_length=30)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('SUCCEEDED', 'Succeeded'), ('FAILED', 'Failed')], default='PENDING', max_length=10)),
                ('external_ref', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='payments.account')),
                ('invoice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='payments.invoice')),
            ],
        ),
        migrations.CreateModel(
            name='PriceComponent',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('kind', models.CharField(choices=[('RECURRING_FIXED', 'Recurring Fixed'), ('METERED', 'Metered')], max_length=20)),
                ('unit_name', models.CharField(max_length=40)),
                ('currency', models.CharField(choices=[('USD', 'USD'), ('EUR', 'EUR'), ('GBP', 'GBP')], default='USD', max_length=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('meter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='price_components', to='payments.meter')),
            ],
        ),
        migrations.CreateModel(
            name='PricePlan',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=120)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='price_plans', to='payments.account')),
            ],
        ),
        migrations.CreateModel(
            name='PriceTier',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('start_qty', models.DecimalField(decimal_places=6, default=Decimal('0'), max_digits=20)),
                ('end_qty', models.DecimalField(blank=True, decimal_places=6, max_digits=20, null=True)),
                ('unit_price_cents', models.PositiveBigIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['start_qty'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('code', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=200)),
                ('taxable', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UsageDailyRollup',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('usage_date', models.DateField()),
                ('quantity', models.DecimalField(decimal_places=6, max_digits=20)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_rollups', to='payments.account')),
                ('meter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='usage_rollups', to='payments.meter')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='usage_rollups', to='payments.product')),
            ],
        ),
        migrations.CreateModel(
            name='UsageEvent',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('quantity', models.DecimalField(decimal_places=6, max_digits=20)),
                ('occurred_at', models.DateTimeField()),
                ('received_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_events', to='payments.account')),
                ('meter', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='usage_events', to='payments.meter')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='usage_events', to='payments.product')),
                ('stack', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='usage_events', to='stacks.stack')),
            ],
        ),
        migrations.CreateModel(
            name='WalletTransaction',
            fields=[
                ('id', core.fields.ShortUUIDField(editable=False, max_length=16, primary_key=True, serialize=False, unique=True)),
                ('kind', models.CharField(choices=[('TOPUP', 'Top-up'), ('DEBIT_INVOICE', 'Debit invoice'), ('REFUND', 'Refund'), ('EXPIRY', 'Expiry'), ('ADJUSTMENT', 'Adjustment')], max_length=20)),
                ('amount_cents', models.BigIntegerField()),
                ('external_ref', models.CharField(blank=True, max_length=255, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallet_transactions', to='payments.account')),
                ('related_invoice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wallet_transactions', to='payments.invoice')),
            ],
        ),
        migrations.RemoveField(
            model_name='billing_history',
            name='organization',
        ),
        migrations.DeleteModel(
            name='Prices',
        ),
        migrations.RemoveField(
            model_name='usage_information',
            name='organization',
        ),
        migrations.RemoveField(
            model_name='usage_information',
            name='stack',
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='wallet', serialize=False, to='payments.account')),
                ('balance_cents', models.BigIntegerField(default=0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='accountdiscount',
            name='discount',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='account_links', to='payments.discount'),
        ),
        migrations.AddField(
            model_name='discountapplication',
            name='invoice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discount_applications', to='payments.invoice'),
        ),
        migrations.AddField(
            model_name='discountapplication',
            name='invoice_line',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='discount_applications', to='payments.invoiceline'),
        ),
        migrations.AddField(
            model_name='invoiceline',
            name='meter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payments.meter'),
        ),
        migrations.AddField(
            model_name='discount',
            name='meter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='payments.meter'),
        ),
        migrations.AddField(
            model_name='charge',
            name='meter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='charges', to='payments.meter'),
        ),
        migrations.AddField(
            model_name='charge',
            name='price_component',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payments.pricecomponent'),
        ),
        migrations.AddField(
            model_name='pricecomponent',
            name='price_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='payments.priceplan'),
        ),
        migrations.AddField(
            model_name='charge',
            name='price_plan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payments.priceplan'),
        ),
        migrations.AddField(
            model_name='pricetier',
            name='price_component',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tiers', to='payments.pricecomponent'),
        ),
        migrations.AddField(
            model_name='pricecomponent',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='payments.product'),
        ),
        migrations.AddField(
            model_name='invoiceline',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payments.product'),
        ),
        migrations.AddField(
            model_name='discount',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='payments.product'),
        ),
        migrations.AddField(
            model_name='charge',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='charges', to='payments.product'),
        ),
        migrations.DeleteModel(
            name='billing_history',
        ),
        migrations.DeleteModel(
            name='usage_information',
        ),
        migrations.AlterUniqueTogether(
            name='accountdiscount',
            unique_together={('account', 'discount')},
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['account', 'period_start', 'period_end'], name='payments_in_account_8638a2_idx'),
        ),
        migrations.AddConstraint(
            model_name='invoice',
            constraint=models.CheckConstraint(condition=models.Q(('total_cents__gte', 0)), name='invoice_total_nonnegative'),
        ),
        migrations.AddIndex(
            model_name='priceplan',
            index=models.Index(fields=['account', 'is_default'], name='payments_pr_account_3314d9_idx'),
        ),
        migrations.AddConstraint(
            model_name='pricetier',
            constraint=models.CheckConstraint(condition=models.Q(('end_qty__isnull', True), ('end_qty__gt', models.F('start_qty')), _connector='OR'), name='pt_end_after_start'),
        ),
        migrations.AddConstraint(
            model_name='pricecomponent',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('kind', 'METERED'), ('meter__isnull', False)), ('kind', 'RECURRING_FIXED'), _connector='OR'), name='pc_meter_required_for_metered'),
        ),
        migrations.AddIndex(
            model_name='invoiceline',
            index=models.Index(fields=['invoice'], name='payments_in_invoice_e311e2_idx'),
        ),
        migrations.AddConstraint(
            model_name='discount',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('fixed_cents__isnull', True), ('kind', 'PERCENT'), ('percent__isnull', False)), models.Q(('fixed_cents__isnull', False), ('kind', 'FIXED'), ('percent__isnull', True)), _connector='OR'), name='discount_kind_fields_valid'),
        ),
        migrations.AddConstraint(
            model_name='discount',
            constraint=models.CheckConstraint(condition=models.Q(('scope', 'ALL'), models.Q(('product__isnull', False), ('scope', 'PRODUCT')), models.Q(('meter__isnull', False), ('scope', 'METER')), _connector='OR'), name='discount_scope_targets_valid'),
        ),
        migrations.AddIndex(
            model_name='charge',
            index=models.Index(fields=['account', 'usage_date', 'invoiced'], name='payments_ch_account_0b705a_idx'),
        ),
        migrations.AddIndex(
            model_name='usagedailyrollup',
            index=models.Index(fields=['account', 'usage_date'], name='payments_us_account_5684bf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usagedailyrollup',
            unique_together={('account', 'product', 'meter', 'usage_date')},
        ),
        migrations.AddIndex(
            model_name='usageevent',
            index=models.Index(fields=['account', 'product', 'meter', 'occurred_at'], name='payments_us_account_2cc9fc_idx'),
        ),
        migrations.AddConstraint(
            model_name='usageevent',
            constraint=models.CheckConstraint(condition=models.Q(('quantity__gte', 0)), name='ue_quantity_gte_0'),
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['account', 'created_at'], name='payments_wa_account_525d3c_idx'),
        ),
    ]
