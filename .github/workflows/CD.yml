name: CD

on:
  push:
    branches: ['dev', 'main']

permissions:
  id-token: write
  contents: read

env:
  CONTAINER_DIR: "./Website"
  TF_DIR: "./terraform"

jobs:
  build-container-app:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
    permissions:
      id-token: write
      contents: read

    outputs:
      image_name: ${{ steps.build_and_push.outputs.image_name }}

    env:
      ACR_NAME: ${{ vars.ACR_NAME }}
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: az acr login --name $ACR_NAME

      - id: build_and_push
        name: Build and push container-app image to ACR
        shell: bash
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          IMAGE_NAME=$ACR_NAME.azurecr.io/deploy-box-container-app:$IMAGE_TAG

          CONTAINER_DIR=$CONTAINER_DIR

          echo "Building image $IMAGE_NAME from $CONTAINER_DIR"
          docker build -t $IMAGE_NAME $CONTAINER_DIR

          echo "Pushing image $IMAGE_NAME to ACR"
          docker push $IMAGE_NAME

          # expose image name for downstream jobs
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
    needs: build-container-app
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id:  ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.x

      - name: Export OIDC env for Terraform
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ vars.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ vars.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ vars.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform init \
            -reconfigure \
            -backend-config="config/backend-${{ github.ref_name == 'main' && 'prod' || github.ref_name }}.conf"

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform plan \
            -var-file="tfvars/${{ github.ref_name == 'main' && 'prod' || github.ref_name }}.tfvars" \
            -var="image_name=${{ needs.build-container-app.outputs.image_name }}" \
            -var="environment=${{ github.ref_name == 'main' && 'prod' || github.ref_name }}"

      - id: terraform_apply
        name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform apply \
            -auto-approve \
            -var-file="tfvars/${{ github.ref_name == 'main' && 'prod' || github.ref_name }}.tfvars" \
            -var="image_name=${{ needs.build-container-app.outputs.image_name }}" \
            -var="environment=${{ github.ref_name == 'main' && 'prod' || github.ref_name }}"

  migrations:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    needs: deploy-infrastructure
    permissions:
      id-token: write
      contents: read

    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Install dependencies
        working-directory: Website
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run migrations
        working-directory: Website
        env:
          ENV: ${{ vars.ENV }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DEPLOY_BOX_GITHUB_TOKEN_KEY: ${{ secrets.DEPLOY_BOX_GITHUB_TOKEN_KEY }}
        run: |
          source venv/bin/activate
          python manage.py makemigrations
          python manage.py migrate